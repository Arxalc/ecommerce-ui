generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  email         String?   @unique
  password      String    @db.VarChar(250)
  emailVerified DateTime?
  image         String?
  userRole      String?   @default("user")
  profile       Profile @relation(fields: [profileId], references: [id]) // references `id` of `Profile`
  profileId     String // relation scalar field (used in the `@relation` attribute above)
  shoppingCart  ShoppingCart?
  promotions    Promotions[]
  accounts      Account[]
  sessions      Session[]
}

model Promotions{
  id            String    @id @default(cuid())
  user  User[] @relation(references: [id])
}
model Profile {
  id     String  @id @default(cuid())
  user   User? 
  address Address?
}

model Address {
  id        String      @default(cuid()) @unique
  address   String

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String // relation scalar field (used in the `@relation` attribute above)
}
model ShoppingCart {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String 
  books     Book[]
}

model Vendor {
  id            String    @id @default(cuid())
  username      String?
  email         String?   @unique
  password      String    @db.VarChar(250)
  emailVerified DateTime?
  image         String?
  userRole      String?   @default("user")
  books         Book[]
}

model Content {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int?
}

model Book {
  isbn          String      @id @unique
  title         String
  author        String
  image         String?
  publishedDate String
  description   String
  genre         Genre    @default(GENERIC)
  language      String
  vendorId      String?
  cardId        String?
  price         Int?
  Vendor        Vendor?  @relation(fields: [vendorId], references: [id])
  shoppingCart  ShoppingCart[] @relation(references: [id])
}

enum Genre {
  ACTION
  COMEDY
  PHIL
  GENERIC
}
