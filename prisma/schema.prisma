generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  username      String?       @unique
  email         String?       @unique
  password      String        @db.VarChar(250)
  emailVerified DateTime?
  image         String?
  userRole      String?       @default("user")
  profileId     String        @unique
  profile       Profile       @relation(fields: [profileId], references: [id])
  accounts      Account[]
  cards         Payment[]
  sessions      Session[]
  shoppingCart  ShoppingCart?
  promotions    Promotions[]
}

model Promotions {
  id           String        @id @default(cuid())
  discountType discountType? @default(FLAT)
  discount     Float
  books        Book[]
  user         User[]
}

model Profile {
  id      String   @id @default(cuid())
  mobile  String?
  address Address?
  user    User?
  mobile  String?
}

model Address {
  id               String  @unique @default(cuid())
  address          String?
  profileId        String  @unique
  addressSecondary String?
  city             String?
  state            String?
  zip              Int?
  profile          Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ShoppingCart {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  books  Book[]
}

model Vendor {
  id            String    @id @default(cuid())
  username      String?
  email         String?   @unique
  password      String    @db.VarChar(250)
  emailVerified DateTime?
  image         String?
  userRole      String?   @default("user")
  Book          Book[]
}

model Content {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int?
}

model Book {
  id            String          @id @unique @default(cuid())
  isbn          String         @unique
  title         String
  author        String
  image         String?
  publishedDate String
  description   String
  genre         Genre          @default(GENERIC)
  language      String
  vendorId      String?
  promotionId   String?
  cardId        String?
  price         Float?
  promotion     Promotions?    @relation(fields: [promotionId], references: [id])
  shoppingCart  ShoppingCart[]
  Vendor        Vendor[]
}

model Payment {
  id         String   @id @default(cuid())
  userId     String
  cardNumber Int
  expiration String
  cvv        Int
  type       CardType @default(VISA)
  user       User     @relation(fields: [userId], references: [id])
}

enum discountType {
  FLAT
  PERCENTAGE
}

enum Genre {
  ACTION
  COMEDY
  SCIFI
  ROMANCE
  MYSTERY
  PHIL
  GENERIC
}

enum CardType {
  VISA
  DISCOVER
  MASTERCARD
}
